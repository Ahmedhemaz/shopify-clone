import { Container } from 'inversify';
import { RegisterUserController } from '../controllers/registerUserController';
import { SERVICES } from './types';
import { IDtoMapper } from '../../../shared-kernal/interfaces/IDtoMapper';
import { User } from '../../domain/user.entity';
import { UserDto } from '../Dto/UserDto';
import { UserMapper } from '../mappers/userMapper';
import { IMiddleware } from '../middlewares/IMiddleware';
import { Request, Response } from 'express';
import { RegisterUserMiddleware } from '../middlewares/registerUserMiddleware';
import { IRequestBodyValidator } from '../validators/request-body-validators/IRequestBodyValidator';
import { RegisterUserRequestBodyValidator } from '../validators/request-body-validators/RegisterUserRequestBodyValidator';
import { ISanitizer } from '../sanitizers/ISanitizer';
import { RegisterUserSanitizer } from '../sanitizers/RegisterUserSanitizer';
const serviceRegistery = new Container();
serviceRegistery.bind<IDtoMapper<User, UserDto>>(SERVICES.IDtoMapper).to(UserMapper);
serviceRegistery.bind<RegisterUserController>(SERVICES.RegisterUserController).to(RegisterUserController);
serviceRegistery.bind<IMiddleware<Request, Response>>(SERVICES.IMiddleware).to(RegisterUserMiddleware);
serviceRegistery.bind<IRequestBodyValidator<UserDto>>(SERVICES.IRequestBodyValidator).to(RegisterUserRequestBodyValidator);
serviceRegistery.bind<ISanitizer<UserDto>>(SERVICES.ISanitizer).to(RegisterUserSanitizer);
export { serviceRegistery }